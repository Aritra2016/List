LinkedList==>
-It follows Doubly LinkedList Data Structure using Nodes & Links with previous Node & next Node, 
-Efficient to perform Insertion at any given position,
-We can add one entire collection into another collection,
-It stores Data as Object,
-It implements two Interface - List(I) , Deque(I),
-
-


Code-01==


//LinkedList Full Concept
import java.util.*;

public class LaunchLL {

	public static void main(String[] args) {
		
		LinkedList ll1=new LinkedList();
		
		ll1.add(11);
		ll1.add(22);
		ll1.add(33);
		ll1.add(44);
		System.out.println("Here is the list"+ll1);
		
		//in build method= addFirst
		
		ll1.addFirst("Hyder Abbas");
		System.out.println(ll1);
		
		
		
		//Index based insertion
		
		ll1.add(3, "Bengaluru");
		System.out.println(ll1);
		
		ll1.addLast(" RichMond Town");
		System.out.println(ll1);
		
		LinkedList ll2=new LinkedList();
		ll2.add(10);
		ll2.add(20);
		ll2.add(30);
		ll2.add(40);
		ll2.add(20);
		
		
		System.out.println(ll2.getFirst());
		System.out.println(ll2.indexOf(20));
		System.out.println(ll2.lastIndexOf(20));

/*Difference between add & offer=
*  add( )= it is used to add must,
* offer()=there is option, you can add the data or not,
*
*
*
*
*/



		ll2.offerFirst(5);
		ll2.offerLast(55);
		System.out.println(ll2);
		
	}

}





















package demo02List;


import java.util.LinkedList;
import java.util.List;

public class LinkedListDemo {

	public static void main(String[] args) {
		//In method level , there is no difference between ArrayList & LinkedList
		//ArrayList,LinkedList,Vector
		// Above 3 classes access the methods in the same way
		List<String>Name= new LinkedList<String>();
		Name.add("Tamal ");
		Name.add("Debanjan ");
		Name.add("Arnab ");
		System.out.println(Name);

		System.out.println("***********");
		
		List<String>Number= new LinkedList<String>();
		Number.add("100");
		Number.add("110");
		Number.add("120");
		System.out.println(Number);
		
		
		System.out.println("*********************");
  //1) ArrayList internally uses a dynamic array to store the elements.
  //1)LinkedList internally uses a doubly linked list to store the elements.
   //2) Manipulation with ArrayList is slow because it internally uses an array. If any element is removed from the array, all the other elements are shifted in memory.
   //2)Manipulation with LinkedList is faster than ArrayList because it uses a doubly linked list, so no bit shifting is required in memory.
   // 4) ArrayList is better for storing and accessing data
  // 4)LinkedList is better for manipulating data.
  // 5) The memory location for the elements of an ArrayList is contiguous.
  //5)The location for the elements of a linked list is not contagious.
		
		List<String>Name2= new LinkedList<String>();
		Name2.add("Tamal ");
		Name2.add("Arnab ");
		Name2.add("Arittam ");
		System.out.println(Name2);
		
		
		//ArrayList(Collection C)= List
		List<String>allStudents = new LinkedList<String>(Name);
		allStudents.addAll(Name2); // This is used to add Name & Name2,
		System.out.println(allStudents);
		
		//To check methods,
		System.out.println(allStudents.contains("Arnab "));
		
		//To remove methods,
		if(allStudents.contains("Arittam"))	{
			allStudents.remove("Arittam");
		}
		
		System.out.println(allStudents);
		System.out.println(allStudents.get(3));// To get a element in a particular index
		System.out.println(allStudents.size());// To get the size of the List
		allStudents.clear();
		System.out.println(allStudents.size());
		
   
	}

}
